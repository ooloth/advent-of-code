#!/usr/bin/env sh

# Usage:
#   new <day><part>
#   new 1a
#   new 25b

# TODO: support these args?
# $ new (infer which puzzle to generate next; i.e. the next unsolved one in AOC_YEAR; need local json file with my AOC progress? or use aoc-cli?)
# $ new 1 (if no part specified, default to first unsolved part? or just generate both parts?)

set -e

source "bin/validate_args"
source "bin/env"

day="${1%[ab]}" # strip the "a" or "b" from the end of $1
part="${1#$day}" # strip the $day from the beginning of $1

function download_description() {
  local day="$1"
  local part="$2"
  local rel_path="aoc/$AOC_YEAR/puzzles/$day.md"
  local abs_path="$PWD/$rel_path"

  if [ -f "$abs_path" ]; then
    echo "ðŸŽ… Found puzzle at '$rel_path'"
    return 0
  fi

  # Ensure all parent directories exist
  mkdir -p "$(dirname "$abs_path")"

  # Download the puzzle description to $rel_path
  # see: https://github.com/scarvalhojr/aoc-cli?tab=readme-ov-file#usage-%EF%B8%8F
  aoc d -q -y $AOC_YEAR -d $day -P -p $rel_path -s $AOC_SESSION_FILE

  echo "ðŸŽ… Saved description to '$rel_path'"
}

function download_input() {
  local day="$1"
  local part="$2"
  local rel_path="aoc/$AOC_YEAR/inputs/$day.txt"
  local abs_path="$PWD/$rel_path"

  if [ -f "$abs_path" ]; then
    echo "ðŸŽ… Found input at '$rel_path'"
    return 0
  fi

  # Ensure all parent directories exist
  mkdir -p "$(dirname "$abs_path")"

  # Download the puzzle input to $rel_path
  # see: https://github.com/scarvalhojr/aoc-cli?tab=readme-ov-file#usage-%EF%B8%8F
  aoc d -q -y $AOC_YEAR -d $day -I -i $rel_path -s $AOC_SESSION_FILE

  echo "ðŸŽ… Saved input to '$rel_path'"
}

download_description "$day" "$part"
download_input "$day" "$part"

# uv run "aoc/utils/new.py" "$AOC_YEAR" "$day" "$part"
